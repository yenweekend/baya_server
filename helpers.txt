CREATE TABLE orders (
    id SERIAL PRIMARY KEY,
    user_id INTEGER,
    order_date DATE,
    amount DECIMAL(10, 2),
    CONSTRAINT fk_user
        FOREIGN KEY(user_id) 
        REFERENCES users(id)
        ON DELETE CASCADE
);


/--------------------------------------ASSOCIATIONS----------------------------------------------\
const User = require('./models/User');
const Order = require('./models/Order');

User.hasMany(Order, {
    foreignKey: 'userId',
    onDelete: 'CASCADE'
});

Order.belongsTo(User, {
    foreignKey: 'userId',
    onDelete: 'CASCADE'
});

module.exports = { User, Order };


\--------------------------------------------
  sequelize
        .sync({ force: true })
        .then(() => {
          console.log("Database & tables created!");
        })
        .catch((err) =>
          console.error("Unable to create tables, shutting down...", err)
        );

\-----------------------------
        const product = await Product.create({
            name: 'Sample Product',
            price: 99.99,
            description: '<p>This is a <strong>sample</strong> product description.</p>'
        });

        // Thêm các thuộc tính cho sản phẩm
        const productAttr1 = await ProductAttr.create({
            productId: product.id,
            attrName: 'Color',
            attrValue: 'Red'
        });
\------------------------------------------
Product.belongsToMany(Product, { through: ProductGift, as: 'Gifts', foreignKey: 'ProductID', otherKey: 'GiftID' });
Product.belongsToMany(Product, { through: ProductGift, as: 'Products', foreignKey: 'GiftID', otherKey: 'ProductID' });


 const toast = useCallback((toastify) => {
    const toast = document.createElement("li");
    const autoRemoveId = setTimeout(() => {
      toastRef?.current?.removeChild(toast);
    }, [4000]);
    toast.onclick = (event) => {
      if (event.target.closest(".close_toast")) {
        toastRef.current.removeChild(toast);
        clearTimeout(autoRemoveId);
      }
    };
    toast.classList.add("toast_bg");
    toast.innerHTML = `<span>${toastify.text}</span>
    <i class="fa-solid fa-xmark close_toast"></i>
   `;
    toast.style.animation = `slideInLeft ease .3s forwards, fadeOut linear 1s 3s forwards`;
    toastRef.current.appendChild(toast);
  }, []);
    .close_toast {
    color: var(--text-primary);
    width: 20px;
    height: 20px;
    cursor: pointer;
  }